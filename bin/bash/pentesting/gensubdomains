#!/usr/bin/env bash

#Generates a list of possible subdomains from a parent domain and a wordlist, provided as arguments.
#Syntax: gensubdomains <parent domain> <path to wordlist>
#Example: gensubdomains example.com /path/to/wordlist.txt


if [ "$#" -lt "2" ]; then #If the number of user-provided arguments is less than 2
    echo "You must provide the parent domain in the form 'example.com' followed by the path to the desired wordlist."
    exit 1 #Failure exit mode
fi 

PARENT="${1}" #Set parent domain equal to the first argument
WORDLIST="${2}" #Set the wordlist path equal to the second argument
FILENAME="${1}-subdomains.txt" #Set the output filename
DIRECTORY="./" #Set the output file directory to the current working directory (./)

if [ ! -f "${WORDLIST}" ]; then #Check whether the provided wordlist file exists
    echo "The provided wordlist path doesn't exist!"
    exit 1 #Failure exit mode
fi 

if [ -f "${DIRECTORY}${FILENAME}" ]; then #Check if the file already exists
    echo "${FILENAME} already exists!"
    exit 1 #Failure exit mode
else
    touch "${DIRECTORY}${FILENAME}" #Create file for output
    #Read the WORDLIST file from stdin, assign each line to the subdomain variable, and append a '.' followed by the PARENT domain. Send the result to the output file.
    while read -r subdomain; do 
        echo "${subdomain}.${PARENT}" >> "${DIRECTORY}${FILENAME}"
    done < "${WORDLIST}" #Provide the wordlist via the stdin stream
fi

if [ -f "${DIRECTORY}${FILENAME}" ] && [ -s "${DIRECTORY}${FILENAME}" ]; then #If the output file was created and the size is greater than zero, then the script succeeded. Otherwise, it failed.
    echo "Subdomain list successfully generated!"
    exit 0 #Successful exit mode
else
    echo "Subdomain list generation failed!"
    exit 1 #Failure exit mode
fi 